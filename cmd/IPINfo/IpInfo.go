package IPINfo

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

type AutoGenerated struct {
	IP       string `json:"ip,omitempty"`
	Hostname string `json:"hostname,omitempty"`
	Anycast  bool   `json:"anycast,omitempty"`
	City     string `json:"city,omitempty"`
	Region   string `json:"region,omitempty"`
	Country  string `json:"country,omitempty"`
	Loc      string `json:"loc,omitempty"`
	Org      string `json:"org,omitempty"`
	Postal   string `json:"postal,omitempty"`
	Timezone string `json:"timezone,omitempty"`
	Readme   string `json:"readme,omitempty"`
}

type asnauto struct {
	Status        string `json:"status,omitempty"`
	StatusMessage string `json:"status_message,omitempty"`
	Data          struct {
		IP        string `json:"ip,omitempty"`
		PtrRecord string `json:"ptr_record,omitempty"`
		Prefixes  []struct {
			Prefix string `json:"prefix,omitempty"`
			IP     string `json:"ip,omitempty"`
			Cidr   int    `json:"cidr,omitempty"`
			Asn    struct {
				Asn         int    `json:"asn,omitempty"`
				Name        string `json:"name,omitempty"`
				Description string `json:"description,omitempty"`
				CountryCode string `json:"country_code,omitempty"`
			} `json:"asn,omitempty"`
			Name        string `json:"name,omitempty"`
			Description string `json:"description,omitempty"`
			CountryCode string `json:"country_code,omitempty"`
		} `json:"prefixes,omitempty"`
		RirAllocation struct {
			RirName          string `json:"rir_name,omitempty"`
			CountryCode      any    `json:"country_code,omitempty"`
			IP               string `json:"ip,omitempty"`
			Cidr             int    `json:"cidr,omitempty"`
			Prefix           string `json:"prefix,omitempty"`
			DateAllocated    string `json:"date_allocated,omitempty"`
			AllocationStatus string `json:"allocation_status,omitempty"`
		} `json:"rir_allocation,omitempty"`
		IanaAssignment struct {
			AssignmentStatus string `json:"assignment_status,omitempty"`
			Description      string `json:"description,omitempty"`
			WhoisServer      string `json:"whois_server,omitempty"`
			DateAssigned     any    `json:"date_assigned,omitempty"`
		} `json:"iana_assignment,omitempty"`
		Maxmind struct {
			CountryCode any `json:"country_code,omitempty"`
			City        any `json:"city,omitempty"`
		} `json:"maxmind,omitempty"`
	} `json:"data,omitempty"`
	Meta struct {
		TimeZone      string `json:"time_zone,omitempty"`
		APIVersion    int    `json:"api_version,omitempty"`
		ExecutionTime string `json:"execution_time,omitempty"`
	} `json:"@meta,omitempty"`
}

//ipurl:="https://ipinfo.io/8.8.8.8/json"

func IpInfo(ips string) {

	//	fmt.Println(urls)
	var json_resp AutoGenerated

	//fmt.Println(ips[0])
	ipurl := fmt.Sprintf("https://ipinfo.io/%s/json", ips)
	//fmt.Println(ipurl)
	spaceClient := http.Client{
		Timeout: time.Second * 2, // Timeout after 2 seconds
	}

	req, err := http.NewRequest(http.MethodGet, ipurl, nil)
	if err != nil {
		log.Fatal(err)
	}

	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0")

	res, getErr := spaceClient.Do(req)
	if getErr != nil {
		log.Fatal(getErr)
	}

	if res.Body != nil {
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				fmt.Println("Error Line 115")
			}
		}(res.Body)
	}

	body, readErr := ioutil.ReadAll(res.Body)
	if readErr != nil {
		log.Fatal(readErr)
	}
	fmt.Println(string(body))
	jsonErr := json.Unmarshal(body, &json_resp)

	if jsonErr != nil {
		log.Fatal(jsonErr.Error())
	}
	ipsstr := fmt.Sprintf("%s", ips)

	asnnumber, asnname, asndesc := asnshow(ipsstr)

	fmt.Println("[+] Country : ", json_resp.Country)
	fmt.Println("[+] Region : ", json_resp.Region)
	fmt.Println("[+] City : ", json_resp.City)
	fmt.Println("[+] Hostname : ", json_resp.Hostname)
	fmt.Println("[+] ASN Number : ", asnnumber)
	fmt.Println("[+] ASN Name : ", asnname)
	fmt.Println("[+] ASN Description : ", asndesc)

}

//	func removePrefix(s string, prefix string) string {
//		if len(s) > len(prefix) && s[:len(prefix)] == prefix {
//			return s[len(prefix):]
//		}
//		return s
//	}
func asnshow(ips string) (int, string, string) {
	//	fmt.Println(ips)
	var jsonasn_resp asnauto

	//	fmt.Println(ips[0])
	ipurl := fmt.Sprintf("https://api.bgpview.io/ip/%s", ips)
	spaceClient := http.Client{
		Timeout: time.Second * 2, // Timeout after 2 seconds
	}

	req, err := http.NewRequest(http.MethodGet, ipurl, nil)
	if err != nil {
		log.Fatal(err)
	}

	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0")

	res, getErr := spaceClient.Do(req)
	if getErr != nil {
		log.Fatal(getErr)
	}

	if res.Body != nil {
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				fmt.Println("Error Line 174")
			}
		}(res.Body)
	}

	body, readErr := ioutil.ReadAll(res.Body)
	if readErr != nil {
		log.Fatal(readErr)
	}

	jsonErr := json.Unmarshal(body, &jsonasn_resp)
	if jsonErr != nil {
		log.Fatal(jsonErr)
	}

	return jsonasn_resp.Data.Prefixes[0].Asn.Asn, jsonasn_resp.Data.Prefixes[0].Asn.Name, jsonasn_resp.Data.Prefixes[0].Asn.Description
}
